[{"categories":["linux"],"content":"linux文本替换sed","date":"2021-11-19","objectID":"/github.tetool.cn/sed/","tags":["linux"],"title":"Sed命令","uri":"/github.tetool.cn/sed/"},{"categories":["linux"],"content":"简单替换 text=\"java or java\" # 单斜杠 / - 替换字符 [ java -\u003e C++ ] (一次) \u003e echo ${text/java/C++} C++ or java # 双斜杠 // - 替换字符 [ java -\u003e C++ ] (多次) \u003e echo ${text//java/and} C++ or C++ # 匹配开通 /# - 替换字符 [ java -\u003e C++ ] \u003e echo ${text/#java/C++} C++ or Java # 匹配开通 /% - 替换字符 [ java -\u003e C++ ] \u003e echo ${text/%java/C++} java or C++ ","date":"2021-11-19","objectID":"/github.tetool.cn/sed/:1:0","tags":["linux"],"title":"Sed命令","uri":"/github.tetool.cn/sed/"},{"categories":["linux"],"content":"sed命令 命令 描述 a\\ 在当前行下面插入文本。 i\\ 在当前行上面插入文本。 c\\ 把选定的行改为新的文本。 d 删除，删除选择的行。 D 删除模板块的第一行。 s 替换指定字符 h 拷贝模板块的内容到内存中的缓冲区。 H 追加模板块的内容到内存中的缓冲区。 g 获得内存缓冲区的内容，并替代当前模板块中的文本。 G 获得内存缓冲区的内容，并追加到当前模板块文本的后面。 l 列表不能打印字符的清单。 n 读取下一个输入行，用下一个命令处理新的行而不是用第一个命令。 N 追加下一个输入行到模板块后面并在二者间嵌入一个新行，改变当前行号码。 p 打印模板块的行。 P (大写) 打印模板块的第一行。 q 退出Sed。 b lable 分支到脚本中带有标记的地方，如果分支不存在则分支到脚本的末尾。 r file 从file中读行。 t label if分支，从最后一行开始，条件一旦满足或者T，t命令，将导致分支到带有标号的命令处，或者到脚本的末尾。 T label 错误分支，从最后一行开始，一旦发生错误或者T，t命令，将导致分支到带有标号的命令处，或者到脚本的末尾。 w file 写并追加模板块到file末尾。 W file 写并追加模板块的第一行到file末尾。 ! 表示后面的命令对所有没有被选定的行发生作用。 = 打印当前行号码。 # 把注释扩展到下一个换行符以前。 ","date":"2021-11-19","objectID":"/github.tetool.cn/sed/:2:0","tags":["linux"],"title":"Sed命令","uri":"/github.tetool.cn/sed/"},{"categories":["linux"],"content":"sed替换标记 命令 描述 g 表示行内全面替换。 p 表示打印行。 w 表示把行写入一个文件。 x 表示互换模板块中的文本和缓冲区中的文本。 y 表示把一个字符翻译为另外的字符（但是不用于正则表达式） \\1 子串匹配标记 \u0026 已匹配字符串标记 ","date":"2021-11-19","objectID":"/github.tetool.cn/sed/:3:0","tags":["linux"],"title":"Sed命令","uri":"/github.tetool.cn/sed/"},{"categories":["linux"],"content":"sed元字符集 命令 描述 ^ 匹配行开始，如：/^sed/匹配所有以sed开头的行。 $ 匹配行结束，如：/sed$/匹配所有以sed结尾的行。 . 匹配一个非换行符的任意字符，如：/s.d/匹配s后接一个任意字符，最后是d。 * 匹配0个或多个字符，如：/*sed/匹配所有模板是一个或多个空格后紧跟sed的行。 [] 匹配一个指定范围内的字符，如/[ss]ed/匹配sed和Sed。 [^] 匹配一个不在指定范围内的字符，如：/[^A-RT-Z]ed/匹配不包含A-R和T-Z的一个字母开头，紧跟ed的行。 (..) 匹配子串，保存匹配的字符，如s/(love)able/\\1rs，loveable被替换成lovers。 \u0026 保存搜索字符用来替换其他字符，如s/love/\u0026/，love这成love。 \u003c 匹配单词的开始，如:/\u003clove/匹配包含以love开头的单词的行。 \u003e 匹配单词的结束，如/love\u003e/匹配包含以love结尾的单词的行。 x{m} 重复字符x，m次，如：/0{5}/匹配包含5个0的行。 x{m,} 重复字符x，至少m次，如：/0{5,}/匹配至少有5个0的行。 x{m,n} 重复字符x，至少m次，不多于n次，如：/0{5,10}/匹配5~10个0的行。 ","date":"2021-11-19","objectID":"/github.tetool.cn/sed/:4:0","tags":["linux"],"title":"Sed命令","uri":"/github.tetool.cn/sed/"},{"categories":["linux"],"content":"sed用法实例 替换操作：s命令 # 替换文本中的字符串： file文件中全部 [ book -\u003e books ] sed -e 's/book/books/' -r file # sed s/book/books/ file # 选项 -n + 参数 p 只打印那些发生替换的行： sed -n 's/test/TEST/;p' file # sed -n s/test/TEST/p file # 选项 -i 将结果回写到 file 文件 sed -i 's/book/books/' file # 删除第2行 sed -e '2d' -r file #sed 2d file # 删除2-5行 sed -e '2,5d' -r file #sed 2,5d file # 删除2行后面全部 sed -e '3,$d' -r file #sed '3,$d' file # 在2行后增加一行 sed -e '2a new_book' -r file #sed 2anew_book file # 在2行前增加一行 sed -e '2i new_book' -r file #sed 2inew_book file # 在2行后增加多行 sed -e '2a new_book1\\ new_book2\\ new_book3' -r file # 将2-5行替换 sed -e '2,5c new_book' -r file #sed -2,5c new_book file # 只留3-5行 sed -n -e '3,5p' -r file # sed -n 3,5p file # 搜索book所在行 sed -n -e '/book/p' file # 搜索book所在行，并替换为books sed -n 's/book/books/;p' file # 删除包含book的所在行 sed -e '/book/d' -r file # 查询包含 old 行，将当前行中首次出现的 book 替换为 pen sed -e '/old/{s/book/pen/}' -r file # 查询包含 old 行中，首次出现 book 行，将book替换为pen，输出当前行替换后结果；（一次） sed -n -e '/old/{s/book/pen/;p;q}' -r file # ;q 查询到结果即结束 # 案例1： 查询IP /sbin/ifconfig -a | sed -n -e '/inet/p' | sed -e '/127.0.0.1/d' | sed -e '/inet6/d' | sed -e 's/^.*inet//g' | sed -e 's/.^*addr://g' | sed -e 's/netmask.*$//g' | sed -e 's/broadcast.*$//g' | sed -e 's/ //;q' # 写的不太好，主要用做联系，使用其他命令更简单、通俗 /sbin/ifconfig -a|grep inet|grep -v 127.0.0.1|grep -v inet6|awk '{print $2}'|tr -d \"addr:\" | head -1 测试数据 book test old_book old_test old_book_old_book old_book_old_book 全面替换标记g # 使用后缀 /g 标记会替换每一行中的所有匹配： sed 's/book/books/g' file ","date":"2021-11-19","objectID":"/github.tetool.cn/sed/:5:0","tags":["linux"],"title":"Sed命令","uri":"/github.tetool.cn/sed/"},{"categories":["redis"],"content":"了解如何在 LoveIt 主题中快速, 直观地创建和组织内容.","date":"2021-11-19","objectID":"/github.tetool.cn/redis_6.0_centralization/","tags":["redis"],"title":"redis6.0集群搭建","uri":"/github.tetool.cn/redis_6.0_centralization/"},{"categories":["redis"],"content":"了解如何在 LoveIt 主题中快速, 直观地创建和组织内容. ","date":"2021-11-19","objectID":"/github.tetool.cn/redis_6.0_centralization/:0:0","tags":["redis"],"title":"redis6.0集群搭建","uri":"/github.tetool.cn/redis_6.0_centralization/"},{"categories":["redis"],"content":"下载安装编译 cd /opt wget http://download.redis.io/releases/redis-6.0.9.tar.gz tar -xvf redis-6.0.9.tar.gz cd redis-6.0.9 make MALLOC=libc make install PREFIX=/usr/local/redis redis6需要使用GCC5以上 CentOS6及以下需要安装GCC5 ","date":"2021-11-19","objectID":"/github.tetool.cn/redis_6.0_centralization/:1:0","tags":["redis"],"title":"redis6.0集群搭建","uri":"/github.tetool.cn/redis_6.0_centralization/"},{"categories":["redis"],"content":"设置redis到环境变量 echo 'export PATH=\"/usr/local/redis/bin:$PATH\"' \u003e\u003e /etc/profile source /etc/profile 创建数据文件夹 mkdir -p /usr/local/redis/run mkdir -p /usr/local/redis/log mkdir -p /usr/local/redis/conf # data目录主要存储redis持久化等数据，子目录按需创建（下文等同） mkdir -p /usr/local/redis/data/7000 mkdir -p /usr/local/redis/data/7001 mkdir -p /usr/local/redis/data/7002 ","date":"2021-11-19","objectID":"/github.tetool.cn/redis_6.0_centralization/:2:0","tags":["redis"],"title":"redis6.0集群搭建","uri":"/github.tetool.cn/redis_6.0_centralization/"},{"categories":["redis"],"content":"复制|修改 配置文件 cp /opt/redis-6.0.9/redis.conf /usr/local/redis/conf/redis.conf y_port=7000 #y_ip=\"192.168.204.128\" y_ip=`/sbin/ifconfig -a|grep inet|grep -v 127.0.0.1|grep -v inet6|awk '{print $2}'|tr -d \"addr:\" | head -1` # 替换配置文件，生成新配置文件 cp redis.conf redis_${y_port}.conf sed -i \"s/^bind 127.0.0.1/bind ${y_ip}/\" redis_${y_port}.conf sed -i \"s/^port 6379/port ${y_port}/\" redis_${y_port}.conf sed -i \"s/^pidfile \\/var\\/run\\/redis_6379.pid/pidfile \\/usr\\/local\\/redis\\/run\\/redis_${y_port}.pid/\" redis_${y_port}.conf sed -i \"s/^logfile \\\"\\\"/logfile \\/usr\\/local\\/redis\\/log\\/redis_${y_port}.log/\" redis_${y_port}.conf sed -i \"s/^dir .\\//dir \\/usr\\/local\\/redis\\/data\\/${y_port}/\" redis_${y_port}.conf sed -i \"s/^# cluster-config-file nodes-6379.conf/cluster-config-file nodes-${y_port}.conf/\" redis_${y_port}.conf sed -i \"s/^# cluster-enabled yes/cluster-enabled yes/\" redis_${y_port}.conf sed -i \"s/^# cluster-node-timeout 15000/cluster-node-timeout 15000/\" redis_${y_port}.conf sed -i \"s/^appendonly no/appendonly yes/\" redis_${y_port}.conf sed -i \"s/^daemonize no/daemonize yes/\" redis_${y_port}.conf ","date":"2021-11-19","objectID":"/github.tetool.cn/redis_6.0_centralization/:3:0","tags":["redis"],"title":"redis6.0集群搭建","uri":"/github.tetool.cn/redis_6.0_centralization/"},{"categories":["redis"],"content":"启动配置 redis-server /usr/local/redis/conf/redis_7000.conf ","date":"2021-11-19","objectID":"/github.tetool.cn/redis_6.0_centralization/:4:0","tags":["redis"],"title":"redis6.0集群搭建","uri":"/github.tetool.cn/redis_6.0_centralization/"},{"categories":["redis"],"content":"停止 pgrep redis-server | xargs -exec kill -9 ","date":"2021-11-19","objectID":"/github.tetool.cn/redis_6.0_centralization/:5:0","tags":["redis"],"title":"redis6.0集群搭建","uri":"/github.tetool.cn/redis_6.0_centralization/"},{"categories":["redis"],"content":"关闭防火墙 systemctl stop firewalld.service #关闭防火墙开机自启 #systemctl disable firewalld.service ","date":"2021-11-19","objectID":"/github.tetool.cn/redis_6.0_centralization/:6:0","tags":["redis"],"title":"redis6.0集群搭建","uri":"/github.tetool.cn/redis_6.0_centralization/"},{"categories":["redis"],"content":"创建集群 # 替换参数\\\u003cip\u003e:\\\u003cport\u003e，全部ip:port redis-cli --cluster create \u003cip\u003e:\u003cport\u003e \u003cip\u003e:\u003cport\u003e --cluster-replicas 1 ","date":"2021-11-19","objectID":"/github.tetool.cn/redis_6.0_centralization/:7:0","tags":["redis"],"title":"redis6.0集群搭建","uri":"/github.tetool.cn/redis_6.0_centralization/"},{"categories":["redis"],"content":"注意看M和S，对照下集群角色表 # 例： redis-cli --cluster create 192.168.204.128:7000 192.168.204.128:7001 192.168.204.128:7002 192.168.204.129:7000 --cluster-replicas 1 ","date":"2021-11-19","objectID":"/github.tetool.cn/redis_6.0_centralization/:8:0","tags":["redis"],"title":"redis6.0集群搭建","uri":"/github.tetool.cn/redis_6.0_centralization/"},{"categories":["redis"],"content":"查看集群状态 redis-cli -c -h 192.168.204.128 -p 7001 cluster info ","date":"2021-11-19","objectID":"/github.tetool.cn/redis_6.0_centralization/:9:0","tags":["redis"],"title":"redis6.0集群搭建","uri":"/github.tetool.cn/redis_6.0_centralization/"},{"categories":["redis"],"content":"查看集群节点 redis-cli -c -h 192.168.204.128 -p 7000 cluster nodes ","date":"2021-11-19","objectID":"/github.tetool.cn/redis_6.0_centralization/:10:0","tags":["redis"],"title":"redis6.0集群搭建","uri":"/github.tetool.cn/redis_6.0_centralization/"},{"categories":["redis"],"content":"连接集群 使用 -c 参数 redis-cli -c -h 192.168.204.128 -p 7000 参考： Redis——6.0集群安装部署 ","date":"2021-11-19","objectID":"/github.tetool.cn/redis_6.0_centralization/:11:0","tags":["redis"],"title":"redis6.0集群搭建","uri":"/github.tetool.cn/redis_6.0_centralization/"},{"categories":null,"content":"hugo 的基本功能","date":"2021-11-18","objectID":"/github.tetool.cn/hugo/","tags":["hugo"],"title":"Hugo 功能简介","uri":"/github.tetool.cn/hugo/"},{"categories":null,"content":"下载 二进制包下载 https://github.com/spf13/hugo/releases 初始项目 # 当前目录下初始化项目 hugo new site . 创建文章 hugo new about/_index.md 换肤 cd themes # git clone https://github.com/spf13/hyde.git git clone https://gitlab.com/toryanderson/hugo-icarus.git 配置hugo-icarus皮肤 cd themes git clone https://gitlab.com/toryanderson/hugo-icarus.git cd .. cp themes/hugo-icarus/exampleSite/config.toml . cp themes/hugo-icarus/exampleSite/data/l10n.toml data/ vi config.toml # 注释 themesDir = \"../..\" 行 运行 hugo server --theme=hyde --buildDrafts 部署 hugo --theme=hyde --baseUrl=\"http://coderzh.github.io/\" # （注意，以上命令并不会生成草稿页面，如果未生成任何文章，请去掉文章头部的 draft=true 再重新生成。） # 如果一切顺利，所有静态页面都会生成到 public 目录，将pubilc目录里所有文件 push 到刚创建的Repository的 master 分支。 github 部署 hugo --theme=hyde --baseUrl=\"http://coderzh.github.io/\" cd public git init git remote add origin https://github.com/coderzh/coderzh.github.io.git git add -A git commit -m \"first commit\" git push -u origin master # or hugo --theme=hyde --baseUrl=\"http://coderzh.github.io/\" git add -A git commit -m \"first commit\" git push -u origin master ","date":"2021-11-18","objectID":"/github.tetool.cn/hugo/:0:0","tags":["hugo"],"title":"Hugo 功能简介","uri":"/github.tetool.cn/hugo/"},{"categories":null,"content":"  LoveIt 是一个由 Dillon 开发的简洁、优雅且高效的 Hugo 博客主题。 它的原型基于 LeaveIt 主题 和 KeepIt 主题。 Hugo 主题 LoveItHugo 主题 LoveIt \"\rHugo 主题 LoveIt\r ","date":"2019-08-02","objectID":"/github.tetool.cn/about/:0:0","tags":null,"title":"关于 LoveIt","uri":"/github.tetool.cn/about/"},{"categories":null,"content":"特性 性能和 SEO  性能优化：在 Google PageSpeed Insights 中， 99/100 的移动设备得分和 100/100 的桌面设备得分  使用基于 JSON-LD 格式 的 SEO SCHEMA 文件进行 SEO 优化  支持 Google Analytics  支持 Fathom Analytics  支持搜索引擎的网站验证 (Google, Bind, Yandex and Baidu)  支持所有第三方库的 CDN  基于 lazysizes 自动转换图片为懒加载 外观和布局 / 响应式布局 / 浅色/深色 主题模式  全局一致的设计语言  支持分页  易用和自动展开的文章目录  支持多语言和国际化  美观的 CSS 动画 社交和评论系统  支持 Gravatar 头像  支持本地头像  支持多达 64 种社交链接  支持多达 28 种网站分享  支持 Disqus 评论系统  支持 Gitalk 评论系统  支持 Valine 评论系统  支持 Facebook 评论系统  支持 Telegram comments 评论系统  支持 Commento 评论系统  支持 Utterances 评论系统 扩展功能  支持基于 Lunr.js 或 algolia 的搜索  支持 Twemoji  支持代码高亮  一键复制代码到剪贴板  支持基于 lightgallery.js 的图片画廊  支持 Font Awesome 图标的扩展 Markdown 语法  支持上标注释的扩展 Markdown 语法  支持分数的扩展 Markdown 语法  支持基于 $ \\KaTeX $ 的数学公式  支持基于 mermaid 的图表 shortcode  支持基于 ECharts 的交互式数据可视化 shortcode  支持基于 Mapbox GL JS 的 Mapbox shortcode  支持基于 APlayer 和 MetingJS 的音乐播放器 shortcode  支持 Bilibili 视频 shortcode  支持多种注释的 shortcode  支持自定义样式的 shortcode  支持自定义脚本的 shortcode  支持基于 TypeIt 的打字动画 shortcode  支持基于 Smooth Scroll 的滚动动画  支持基于 cookieconsent 的 Cookie 许可横幅 … ","date":"2019-08-02","objectID":"/github.tetool.cn/about/:0:1","tags":null,"title":"关于 LoveIt","uri":"/github.tetool.cn/about/"},{"categories":null,"content":"许可协议 LoveIt 根据 MIT 许可协议授权。 更多信息请查看 LICENSE 文件。 LoveIt 主题中用到了以下项目，感谢它们的作者： normalize.css Font Awesome Simple Icons Animate.css Smooth Scroll autocomplete.js Lunr.js algoliasearch lazysizes object-fit-images Twemoji lightgallery.js clipboard.js Sharer.js TypeIt $ \\KaTeX $ mermaid ECharts Mapbox GL JS APlayer MetingJS Gitalk Valine cookieconsent ","date":"2019-08-02","objectID":"/github.tetool.cn/about/:0:2","tags":null,"title":"关于 LoveIt","uri":"/github.tetool.cn/about/"}]